-- ghci> :l 1baby
doubleMe x = x + x

doubleUs x y = doubleMe x + doubleMe y

doubleSmallNumber x = if x > 100
                        then x
                        else x*2

doubleSmallNumber' x = (if x > 100 then x else x*2) + 1

lostNumbers = [4,8,15,16,23,42]

[1,2,3,4] ++ [9,10,11,12]
"hello" ++ " " ++ "world"
['w','o'] ++ ['o','t']

-- cons operator
'A':" SMALLCAT" -- "A SMALLCAT"
5:[1,2,3,4,5] -- [5,1,2,3,4,5]

[1,2,3,4] ++ [5]

-- Access list attribute with index
"Steve Buscemi" !! 6

[[1,2],[3,4]] !! 1 -- [3, 4]

[3,2,1] > [2,1,0] -- True

head [5,4,3,2,1] -- 5

tail [5,4,3,2,1] -- 1

init [5,4,3,2,1] -- [5,4,3,2]

length [5,4,3,2,1] -- 5

null [1,2,3] -- False

reverse [5,4,3,2,1] -- [1,2,3,4,5]

take 0 [1,2,3] -- []
take 1 [1,2,3] -- 1

drop 0 [1,2,3] -- [1,2,3]
drop 1 [1,2,3] -- [2,3]
drop 100 [1,2,3] -- []

maximum [1,2,3] -- 3
minimum [1,2,3] -- 1

sum [1,2,3,4] -- 10
product [1,2,3,4] -- 24

4 `elem` [1,2,3,4] -- True
10 `elem` [1,2,3,4] -- False

[1..20]
['a'..'z']
['K'..'Z']
[2,4..20]
[3,6..20]

[13,26..24*13] -- [13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299,312]
-- prefer infinite list
take 24 [13, 26..] -- [13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299,312]

take 10 (cycle [1,2,3]) -- [1,2,3,1,2,3,1,2,3,1]
take 12 (cycle "LOL ") -- "LOL LOL LOL "

replicate 3 10 -- [10,10,10]

[0.1, 0.3, ... 1] -- [0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]

[x*2 | x <- [1..10]] -- [2,4,6,8,10,12,14,16,18,20]
[x*2 | x <- [1..10], x*2 >= 12] -- [12,14,16,18,20]

[ x | x <- [50..100], x `mod` 7 == 3] -- [52,59,66,73,80,87,94]

boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x ]
boomBangs [7..13] -- ["BOOM!","BOOM!","BANG!","BANG!"]

[x+y | x <- [1,2,3], y <- [10,100,1000]] -- [11,101,1001,12,102,1002,13,103,1003]
